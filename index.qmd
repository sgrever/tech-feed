---
title: "TechFeed"
format: 
  dashboard:
    scrolling: true 
    theme: 
      - styles.scss
    orientation: columns
echo: false
---

```{r packages}
#| output: false
library(dplyr)
library(glue)
library(lubridate)
library(tidyr)
library(janitor)
library(httr2)
library(jsonlite)
library(reactable)
library(htmltools)
library(stringr)
```

```{r colors}
#| output: false
blue <- '#4368B6'
green <- '#78A153' 
yellow <- '#DEC23B' 
orange <- '#E4930A' 
red <- '#C53211' 
gray <- '#64605f'
black <- '#242424'
tan <- '#fffdf5'
```

```{r api-functiions}
#| output: false

# Convert json to dataframe
# Used in create_article_results()
extract_elements <- function(x) {
  data.frame(
    source = ifelse(is.null(x$source$name), "", x$source$name),
    author = ifelse(is.null(x$author), "", x$author),
    title = ifelse(is.null(x$title), "", x$title),
    description = ifelse(is.null(x$description), "", x$description),
    content = ifelse(is.null(x$content), "", x$content),
    url = ifelse(is.null(x$url), "", x$url),
    url_image = ifelse(is.null(x$urlToImage), "", x$urlToImage),
    date = ifelse(is.null(x$publishedAt), "", x$publishedAt)
  )
}

create_article_results <- function(url) {
  #' @title Create Article Results
  #' 
  #' @description 
  #' Query NewsAPI and save results
  #' The request is executed using httr2 and results are parsed with jsonlite.
  #' Output is saved as an RDS file.
  #' 
  #' @param url (str)
  #' Request URL with specified parameters
  #' Ex: glue("https://newsapi.org/v2/everything?q=apple&from={start_date}&sortBy=publishedAt&apiKey={key}")
  #'
  #' @return 
  #' Dataframe with API results
  
  # Create a request object
  request <- request(url) 
  
  # Silence httr errors, if any  
  response <- request |> 
    req_error(is_error = \(resp) FALSE) |> 
    req_perform()
  
  
  ### If response code 200, ensure there are good results
  if (response$status_code == 200) {
    message("GOOD - Status 200") 
    
    news_raw <- response %>%
    resp_body_json()
    
    if (news_raw$totalResults >= 5) {
      
      # Extract if >=5 results  
      articles_list <- purrr::map(
      .x = news_raw$articles,
      .f = ~ extract_elements(.x)
      )
    
      articles_table <- bind_rows(articles_list)
    
    } else {
      
      # Create blank table if <5 results
      articles_table <- tibble(
        source = "",
        author = "",
        title = "",
        description = "",
        content = "",
        url = "",
        url_image = "",
        date = ""
      )
      
    }
  
    
  ### If response code 400, create blank table  
  } else {
    
    articles_table <- tibble(
      source = "",
      author = "",
      title = "",
      description = "",
      content = "",
      url = "",
      url_image = "",
      date = ""
    )
  }

  articles_table
  
}  
```


```{r prep-functions}
#| output: false

# image render
render_image <- function(url) {
  as.character(tags$img(src = url, height = '100px'))
}

# set up for reactable
display_prep <- function(tab) {
  #' @title Prepare tables for display
  #' 
  #' @param tab 
  #' Dataframe with API results
  #' Output of create_article_results()
  #' 
  #' @output
  #' Dataframe with 4 new columns, each for reactable.
  #' `display_preview` = content to show underneath title
  #' `url_image_display` = image URL that will render
  #' `read_more` = external link to full article
  #' `Rank` = something to sort table
  
  
  articles_preview <- tab |> 
    mutate(display_preview = 
             case_when(
               description == "" & content == "" ~ "No preview",
               description == "" ~ content,
               content == "" ~ description, 
               T ~ description
             ))  
  
  articles_image <- articles_preview |>
    rowwise() |> 
    mutate(url_image_display = render_image(url_image))
  
  articles_hyperlink <- articles_image |> 
    # Hyperlink with icon
    mutate(read_more = sprintf(
      paste0('<a href="', 
             URLdecode(url),
             '" target="_blank">', 
             '&#x1F517;',
             '</a>')
    )) |> 
    # Sneak in some inline styling because CSS isn't working...
    mutate(read_more = str_replace(
      read_more,
      ' target=',
      ' style="text-decoration:none" target ='
    )) |> 
    select(
      `Image` = url_image, # plain text link
      `Title` = title,
      `Preview` = display_preview,
      `Link` = read_more, # active link
      url
    ) 

  articles_dedup <- articles_hyperlink |> 
    group_by(url) |> # some duplicates
    slice(1) |> 
    ungroup() |> 
    head(20)
  
  articles_dedup$Rank <- seq(1:nrow(articles_dedup))
  
  articles_ordered <- articles_dedup |> 
    select(Rank, everything())
  
  articles_ordered
  
}
```

```{r reactable-functions}
#| output: false

# hover text
with_tooltip <- function(value, tooltip) {
  tags$abbr(
    style = "cursor: help",
    title = tooltip, 
    value)
}

# build reactable
news_reactable <- function(display_data) {
  #' @title Make News Reactble
  #' 
  #' @param display_data 
  #' Dataframe with new columns for reactable render
  #' Output of display_prep()
  #' 
  #' @output 
  #' Reactable object with styling and tooltip
  
  if (nrow(display_data) <= 1) {
    
    "No results returned for keyword"
    
  } else {
    
    display_data |> 
    reactable(
      columns = list(
        
        Rank = colDef(maxWidth = 75, 
                      vAlign = "center",
                      header = with_tooltip(
                        "Rank", "Popularity ranking according to NewsAPI"
                      )
        ),
        
        Image = colDef(
          maxWidth = 300,
          align = "center",
          vAlign = "center",
          cell = function(value) {
            tags$img(src = value, height = "100px")
          },
          header = with_tooltip(
            "Image", "Publication image, if available"
          )
        ),
        
        # Transform title to include Preview underneath it  
        Title = colDef(
          name = "Title / Preview",
          vAlign = "center",
          cell = function(value, index) {
            Preview <- display_data$Preview[index]
            div(
              div(style = list(fontWeight = 600, fontSize = "24px"), value),
              div(style = list(fontSize = "16px"), Preview)
            )
          },
          header = with_tooltip(
            "Title", "Article title and description"
          )
        ),
        
        Link = colDef(html = T, maxWidth = 75, vAlign = "center",
                      header = with_tooltip(
                        "Link", "Link to full article in new window"
                      )
        ),
        
        Preview = colDef(show = F),
        url = colDef(show = F),
        Image = colDef(show = F, vAlign = "center")
      ),
      highlight = T,
      pagination = FALSE,
      striped = T,
      outlined = F,
      theme = reactableTheme(
        stripedColor = tan,
        backgroundColor = '#F5F2E7',
        highlightColor = '#e3e1dc'
      )
    )
  }
  
}

```


```{r set-urls}
#| output: false
#| eval: true

# Establish parameters and build API strings
# Category options: https://newsapi.org/docs/endpoints/top-headlines
key <- Sys.getenv('NEWS_API_KEY')
end_date <- today() - ((wday(today()) %% 7)) # latest Saturday
start_date <- end_date - 6 # preceding Sunday
today <- Sys.Date()

# Technology headlines
pop_url <- glue(
  "https://newsapi.org/v2/top-headlines?country=us&category=technology&from={start_date}&to={end_date}&sortBy=popularity&apiKey={key}"
)

# Keyword DOGE
doge_url <- glue(
  "https://newsapi.org/v2/everything?q=doge&from={start_date}&sortBy=popularity&language=en&apiKey={key}"
)

# Keyword CYBERSECURITY
cyber_url <- glue(
  "https://newsapi.org/v2/everything?q=cybersecurity&from={start_date}&sortBy=popularity&language=en&apiKey={key}"
)

# Keyword OPENAI
openai_url <- glue(
  "https://newsapi.org/v2/everything?q=openai&from={start_date}&sortBy=popularity&language=en&apiKey={key}"
)
```


```{r temp-import-tables}
#| eval: false

######## ! IMPORTANT ! #################
#  EVAL: F BEFORE PUBLISHING
########################################

articles_popular <- readRDS("data/articles_popular.RDS") 
articles_doge <- readRDS("data/articles_doge.RDS")
articles_cyber <- readRDS("data/articles_cyber.RDS")
articles_openai <- readRDS("data/articles_ai2.RDS")
```

```{r call-api}
#| eval: true

######## ! IMPORTANT ! #################
#  EVAL: T BEFORE PUBLISHING
########################################

articles_popular <- create_article_results(pop_url)
articles_doge <- create_article_results(doge_url)
articles_cyber <- create_article_results(cyber_url)
articles_openai <- create_article_results(openai_url)
```

```{r format-start-date}
#| output: false

# used in callouts, such as:
# <h3>This Week in Tech: [[ February 9, 2025 ]]</h3>  

end_string <- paste0(month(end_date, label = T, abbr = F), " ",
       day(end_date), ", ",
       year(end_date))
```

```{r clean-dates}
#| output: false

# used in callouts, such as:
# <h5>Articles from [[ 2/9/25 - 2/15/25 ]]</h5>

drop_leading_zeros <- function(date) {
  slash_format <- format(date, "%m/%d/%y")
  slash_no_zeros <- str_remove(slash_format, "^0") |> 
  str_remove("(?<=/)0")
  
  slash_no_zeros
}
```


# Popular {scrolling="true"}

## Col 1 

### Row {height = '20%'}


<h3>This Week in Tech: `r end_string`</h3>  

<h5><i>Most popular technology articles from <a href="https://newsapi.org/" target = "_blank">NewsAPI</a>. Updated every Sunday.</i></h5>


### Row {height = '70%'}


```{r reactable-popular}
articles_popular |> 
  display_prep() |> 
  news_reactable()
```


### Row 3 {height='10%'}

<h5>Articles from `r drop_leading_zeros(start_date)` - `r drop_leading_zeros(end_date)`</h5>


# Cybersecurity {scrolling="true"}

## Col 1 

### Row {height = '20%'}


<h3>Cybersecurity higlights: `r end_string`</h3>  

<h5><i>Most popular cybersecurity articles from <a href="https://newsapi.org/" target = "_blank">NewsAPI</a>. Updated every Sunday.</i></h5>


### Row {height = '70%'}


```{r reactable-cyber}
articles_cyber |> 
  display_prep() |> 
  news_reactable()
```


### Row 3 {height='10%'}

<h5>Articles from `r drop_leading_zeros(start_date)` - `r drop_leading_zeros(today)`</h5>


# DOGE {scrolling="true"}

## Col 1 

### Row {height = '20%'}


<h3>DOGE higlights: `r end_string`</h3>  

<h5><i>Most popular Department of Government Efficiency articles from <a href="https://newsapi.org/" target = "_blank">NewsAPI</a>. Updated every Sunday.</i></h5>


### Row {height = '70%'}


```{r reactable-doge}
articles_doge |> 
  display_prep() |> 
  news_reactable()
```


### Row 3 {height='10%'}

<h5>Articles from `r drop_leading_zeros(start_date)` - `r drop_leading_zeros(today)`</h5>


# OpenAI {scrolling="true"}

## Col 1 

### Row {height = '20%'}


<h3>OpenAI higlights: `r end_string`</h3>  

<h5><i>Most popular OpenAI articles from <a href="https://newsapi.org/" target = "_blank">NewsAPI</a>. Updated every Sunday.</i></h5>


### Row {height = '70%'}


```{r reactable-openai}
articles_openai |> 
  display_prep() |> 
  news_reactable()
```


### Row 3 {height='10%'}

<h5>Articles from `r drop_leading_zeros(start_date)` - `r drop_leading_zeros(today)`</h5>




